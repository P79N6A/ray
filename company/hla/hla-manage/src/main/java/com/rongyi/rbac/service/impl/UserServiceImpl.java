package com.rongyi.rbac.service.impl;

import com.rongyi.rbac.model.dao.RoleDao;
import com.rongyi.rbac.model.dao.UserDao;
import com.rongyi.rbac.model.dao.UserRoleDao;
import com.rongyi.rbac.model.entity.Authority;
import com.rongyi.rbac.model.entity.Role;
import com.rongyi.rbac.model.entity.UserInfo;
import com.rongyi.rbac.model.entity.UserRole;
import com.rongyi.rbac.mapper.rbac.UserMapper;
import com.rongyi.rbac.model.param.AccountParam;
import com.rongyi.rbac.model.param.UserParam;
import com.rongyi.rbac.model.param.UserRoleParam;
import com.rongyi.rbac.service.UserService;
import com.rongyi.rbac.model.vo.UserInfoVO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Description：系统用户表
 * Author:  caijie
 * History: 变更记录
 * <ModifiedBy>    <ModifiedDate>     <ModifiedVersion>
 * Administrator          2018/8/16 19:27          1.0
 * ModifiedRemark:
 * Copyright (C): 上海容易网电子商务股份有限公司
 *
 * Auto generated by fms-mybatis-generator
 */
@Slf4j
@Service
public class UserServiceImpl implements UserService {


    @Autowired
    private UserMapper usersMapper;

    @Autowired
    private UserDao usersDao;

    @Autowired
    private UserRoleDao userRolesDao;

    @Autowired
    private RoleDao roleDao;

    /**
     * Description：根据账号查询是否存在已启用的账号
     * Author:  caijie
     * History: 变更记录
     * <ModifiedBy>    <ModifiedDate>     <ModifiedVersion>
     * Administrator          2018/8/16 19:27          1.0
     * ModifiedRemark:
     * Copyright (C): 上海容易网电子商务股份有限公司
     */

    @Override
    public UserInfo getUserByUserAccount(String userAccount) {
            Map<String,Object> paraMap = new HashMap<String, Object>();
            paraMap.put("userAccount", userAccount);
            return usersMapper.getUserByUserAccount(paraMap);
    }

    /**
     * 获取内部员工账号列表
     * @param param
     * @return
     */
    @Override
    public List<UserInfo> findPageList(UserParam param) {
        return usersDao.findPageList(param);
    }
    /**
     * 获取内部员工账号数量
     * @param param
     * @return
     */
    @Override
    public Integer findUsersCount(UserParam param){
        return usersDao.findUsersCount(param);
    }

    @Override
    public UserInfoVO getUserById(Integer userId) {
        log.info("getUserById|requestParam (userId" +  userId + ")");
        UserInfo userInfo =  usersDao.getUserById(userId.longValue());
        log.info("qgetUserById|result" + userInfo);
        return  parameterProcessing(userInfo);
    }
    @Override
    public int addNewUser(String username, String name, String nickname, String phone, String memo, String createBy) {
        log.info("addNewUser|requestParam (username" +  username + ")");
        UserInfo user = usersDao.getUserByUserAccount(username);
        if (user.getId() != null) {
            log.warn("Account name cannot be repeated !");
            throw new RuntimeException("用户名已存在！");
        }
        return usersDao.addNewUser(username, name, nickname, phone, memo, createBy);
    }

    @Override
    public int updateUser(Integer id, String name, String nickname, String phone, String memo, String updateBy) {
        return usersDao.updateUser(id, name, nickname, phone, memo, updateBy);
    }

    @Override
    public int editUser(AccountParam param) throws Exception{
        log.info("editUser|requestParam " +  param );
        boolean registerTag = false;
        if(param.getUserId() == null){
            UserInfo user = usersDao.getUserByUserAccount(param.getUsername());
            if (user != null && user.getId() != null) {
                log.warn("Account name cannot be repeated !");
                throw new RuntimeException("用户名已存在！");
            }
            registerTag = true;
        }

        int userId = usersDao.editUser(param);
        if(registerTag  && userId > 0){
          // 新建角色
            Role role = new Role();
            role.setName(param.getUsername());//角色名称
            role.setStatus((byte) 0);//角色状态 0正常 1停用
            role.setCreateBy(userId); //创建人ID
            role.setCreateAt(new Date());//创建时间
            role.setUpdateBy(userId);//修改人ID
            role.setUpdateAt(new Date());//修改时间
            role.setMemo(param.getMemo());//备注
           int roleId =  roleDao.saveRole(role);
            log.info("editUser| roleId:" + roleId);

            //分配用户角色
           Integer[] userRolesList =  new Integer[]{roleId};
            Map map = new HashMap();
            map.put("userId",  userId);
            map.put("roles", userRolesList);
            int userRolesId =  userRolesDao.save(map);
            log.info("editUser| userRolesId" +  userRolesId );
        }
        return userId;
    }


    /**
     * 查询用户角色
     *
     * @param userId
     *            用户ID
     * @return
     */
    @Override
    public List<UserRole> getUserRoleListByUserId(Integer userId) {
        log.info("getUserRoleListByUserId|requestParam (userId" +  userId + ")");
        return userRolesDao.getUserRoleListByUserId(userId);
    }

    /**
     * @Author： caijie
     * @Description： 修改密码
     * @Date： 2018/8/22 13:42
     * @Param： [id, password]
     * @Return： int
     */
    @Override
    public Boolean resetPwd(AccountParam param) {
        log.info("resetPwd|requestParam " +  param );
        Boolean passwordIsPassword  =  usersDao.checkPwd(param.getUserId(),param.getPassword());
        //校验密码是否正确
        if( param.getQueryType() == 1){
            return passwordIsPassword;
        }
          usersDao.resetPwd(param.getUserId(), param.getNewPassword());
        return passwordIsPassword;
    }

    /**
     * 分配用户角色
     *
     * @param userId
     * @param roles
     * @return
     */
    @Override
    public int saveUserRoles(Integer userId, String roles) {
        userRolesDao.deleteByExample(userId);
        Map map = new HashMap();
        map.put("userId", userId);
        map.put("roles", roles.split("-"));
        return userRolesDao.save(map);
    }
    /**
     * 分配用户角色
     *
     * @param param
     * @return
     */
    public int saveUserRoles(UserRoleParam param) {
        log.info("saveUserRoles|requestParam" +  param);
        userRolesDao.deleteByExample(param.getUserId());
        Map<String,Object> map = new HashMap<String, Object>();
        map.put("userId", param.getUserId());
        map.put("roles", param.getRoleIds());
        return userRolesDao.save(map);
    }

    /**
     * 修改用户状态
     *
     * @param id
     * @param status
     * @param reason
     * @return
     */
    @Override
    public int updateStatus(Integer id, byte status, String reason) {
        log.info("updateStatus|requestParam(userId:" +  id + ",status:" + status + ")" );
        return usersDao.updateStatus(id, status, reason);
    }
    /**
     * 停用/启用用户账号
     * @param param
     * @return
     */
    @Override
    public int updateUserStatus(AccountParam param){
        log.info("updateUserStatus|requestParam" +  param);
        return usersDao.updateUserStatus(param);
    }

    /**
     * 获取用户权限
     */
    @Override
    public List<String> getAuthsValueByUserId(Integer userId) {
        log.info("getAuthsValueByUserId|requestParam(userId:" + userId +")");
        List<Authority> auths = usersDao.getAuthsByUserId(userId);
        List<String> authValues = new ArrayList<String>();
        for (Authority auth : auths) {
            authValues.add(auth.getValue());
        }
        return authValues;
    }


    @Override
    public int getUserByNameCount(String userName){
//        return usersDao.getAllByUsernameLikeCount(userName);
        int allByUsernameLikeCount = usersDao.getAllByUsernameLikeCount(userName);
        return allByUsernameLikeCount;
    }


    @Override
    public List<Integer> roleIdsByUserId(Integer userId){
        log.info("roleIdsByUserId|requestParam(userId:" + userId +")");
        List<Integer> roleIds = userRolesDao.roleIdsByUserId(userId);
        log.info("roleIds: " + roleIds);
        return roleIds;
    }

    /**
     * 获取用户列表
     * @param param
     * @return
     */
    @Override
     public List<UserInfoVO> queryUserList(UserParam param){
        log.info("queryUserList|requestParam" + param);
        List<UserInfo>  userInfos =  usersDao.queryUserList(param);
        log.info("queryUserList|result" + userInfos);
        List<UserInfoVO> userInfoList = new ArrayList<>();
        if(!userInfos.isEmpty()) {
            for (UserInfo user:userInfos) {
                userInfoList.add(parameterProcessing(user));
            }
        }
        return userInfoList;
     }

    @Override
     public int queryUserListCount(UserParam param) {
         return usersDao.queryUserListCount( param );
     }


    /**
     * 参数处理
     * @param user
     * @return
     */

     private UserInfoVO parameterProcessing(UserInfo user){
         UserInfoVO userInfo =  new UserInfoVO();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd HH:mm:ss");
         userInfo.setUserId(user.getId());
         userInfo.setUsername(user.getUsername());
         userInfo.setNickname(user.getNickname());
         userInfo.setPhone(user.getPhone());
         userInfo.setStatus(user.getStatus());
         userInfo.setMemo(user.getMemo());
         userInfo.setName(user.getName());
         userInfo.setPassword( "******" );
         if(user.getCreateAt() != null) {
             userInfo.setCreateAt(sdf.format(user.getCreateAt()));
         }

         userInfo.setCreateBy(user.getCreateBy());
         if(user.getUpdateAt() != null) {
             userInfo.setUpdateAt(sdf.format(user.getUpdateAt()));
         }
         userInfo.setUpdateBy(user.getUpdateBy());
         userInfo.setDisableAt(user.getDisableAt());
         userInfo.setReason(user.getReason());
        return  userInfo;
     }

}
